<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.project.doctor_fish_back.repository.user.UserReviewMapper">

    <insert id="save">
        insert into review_tb
        values(default, #{reservationId}, #{userId}, #{img}, #{content}, now(), now())
    </insert>

    <update id="modify">
        update review_tb
        set
            img = #{img},
            content = #{content},
            update_date = now()
        where
            id = #{id}
    </update>

    <delete id="deleteById">
        delete
        from
            review_tb
        where
            id = #{id}
    </delete>

    <select id="findById" resultType="com.project.doctor_fish_back.entity.Review">
        select
            rt.id,
            rt.user_id as userId,
            rt.reservation_id as reservationId,
            rt.img,
            rt.content,
            rt.register_date as registerDate,
            rt.update_date as updateDate,
            ut.name as userName,
            ut.img as userImg,
            (select count(*) from review_like_tb where review_id = rt.id) as likeCount,
            (select count(*) from review_like_tb where user_id = #{userId} and review_id = rt.id) as isLike
        from
            review_tb rt
            left outer join user_tb ut on(rt.user_id = ut.id)
        where
            rt.id = #{reviewId}
    </select>

    <select id="reviewListByUserId" resultType="com.project.doctor_fish_back.entity.Review">
        select
            rt.id,
            rt.user_id as userId,
            rt.img,
            rt.content,
            rt.register_date as registerDate,
            rt.update_date as updateDate,
            ut.name as userName,
            ut.img as userImg,
            (select count(*) from review_like_tb where review_id = rt.id) as likeCount,
            (select count(*) from review_like_tb where user_id = #{userId} and review_id = rt.id) as isLike
        from
            review_tb rt
            left outer join user_tb ut on(rt.user_id = ut.id)
        where
            user_id = #{userId}
        limit #{startIndex}, #{limit}
    </select>

    <select id="reviewCountByUserId" resultType="java.lang.Long">
        select
            count(*)
        from
            review_tb
        where
            user_id = #{userId}
    </select>

    <select id="reviewList" resultType="com.project.doctor_fish_back.entity.Review">
        select
            rt.id,
            rt.user_id as userId,
            rt.img,
            rt.content,
            rt.register_date as registerDate,
            rt.update_date as updateDate,
            ut.name as userName,
            ut.img as userImg,
            (select count(*) from review_like_tb where review_id = rt.id) as likeCount,
            (select count(*) from review_like_tb where user_id = #{userId} and review_id = rt.id) as isLike
        from
            review_tb rt
            left outer join user_tb ut on(rt.user_id = ut.id)
        order by
            registerDate desc
        limit #{startIndex}, #{limit}
    </select>

    <select id="reviewCount" resultType="java.lang.Long">
        select
            count(*)
        from
            review_tb;
    </select>

</mapper>